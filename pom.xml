<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>	<!-- 指定当前pom的版本 -->
	<parent>  <!--用于子模块中，对于父模块的继承-->
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.7.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.xinan.example</groupId>		<!-- 项目的包名(maven属于哪个具体项目) -->
	<artifactId>fengyue</artifactId>	<!--模块名 （项目的具体模块）-->
	<version>0.0.1-SNAPSHOT</version>	<!--版本号-->
	<packaging>jar</packaging>		<!--打包类型，默认jar （还有var  zip  pom等方式）-->

	<modules></modules> <!--聚合继承多个maven项目，可以一起编译-->

	<name>fengyue</name>
	<description>Demo project for Spring Boot</description>

	<properties>
		<java.version>1.8</java.version>
	</properties>

	<!--<dependency>
        <groupId></groupId>
        <artifactId></artifactId>
        <version></version>
        <type></type>
        依赖范围    maven提供了三种class Path（编译/测试/运行）,定义存在于哪种class path中
        	compile(三种范围有效) provided（编译和测试有效）runtime（测试和运行） test(测试时有效)
        	system（编译和测试，与本地相关，移植性差）import（只存在于dependencyManagement中，表示从其他项目导入进来的依赖）
        <scope>test</scope>
        <optional></optional>  &lt;!&ndash;依赖是否可选(设置子项目是否集成该依赖) 默认false&ndash;&gt;
        <exclusions><exclusion></exclusion></exclusions>  &lt;!&ndash;排除依赖的列表&ndash;&gt;
    </dependency>-->

	<dependencyManagement></dependencyManagement>	<!--依赖管理，定义子项目需要继承的依赖 本项目并不调用-->


	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<!-- optional=true，依赖不会传递，该项目依赖devtools;
			  之后依赖boot项目的项目如果要想使用devtools,需要重新引入-->
			<optional>true</optional>
		</dependency>

		<!--  读取配置文件中的信息 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>

		<!--	导入freemarker依赖	-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-freemarker</artifactId>
		</dependency>

		<!--导入thymeleaf 依赖-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!--mysql数据库连接驱动-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>
		<!--引入druid数据源依赖-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>1.1.18</version>
		</dependency>

		<!--  整合mybatis  -->
		<!--mybatis-->
		<!--<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.1</version>
		</dependency>-->
		<!--  mybatis逆向工程（网上查找的方法） -->
		<dependency>
			<groupId>org.mybatis.generator</groupId>
			<artifactId>mybatis-generator-core</artifactId>
			<version>1.3.5</version>
		</dependency>
		<!--mapper-->
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper-spring-boot-starter</artifactId>
			<version>1.2.4</version>
		</dependency>
		<!--pagehelper-->
		<dependency>
			<groupId>com.github.pagehelper</groupId>
			<artifactId>pagehelper-spring-boot-starter</artifactId>
			<version>1.2.3</version>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-elasticsearch</artifactId>
		</dependency>

<!--		&lt;!&ndash; 整合redis &ndash;&gt;-->
<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-data-redis</artifactId>-->
<!--		</dependency>-->

		<!--elastic search启动器-->
		<!--		<dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-data-elasticsearch</artifactId>
            </dependency>

        <dependency>
                <groupId>org.elasticsearch</groupId>
                <artifactId>elasticsearch</artifactId>
                <version>7.3.2</version>
            </dependency>
            <dependency>
                <groupId>org.elasticsearch.client</groupId>
                <artifactId>transport</artifactId>
                <version>7.3.2</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.data</groupId>
                <artifactId>spring-data-elasticsearch</artifactId>
            </dependency>
    -->
		<!--<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>RELEASE</version>
		</dependency>-->
	</dependencies>

	<!--对构建项目提供支持-->
	<build>
		<plugins> <!--插件能力-->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
		</plugins>
		<resources>
			<!-- mapper.xml文件在java目录下 -->
			<resource>
				<directory>src/main/java</directory>
				<includes>
					<include>**/*.xml</include>
				</includes>
			</resource>
			<!-- mapper.xml文件在resources目录下-->
			<!-- <resource>
			<directory>src/main/resources</directory>
			</resource>-->
		</resources>
	</build>

</project>
